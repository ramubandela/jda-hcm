Paypall 23/06/2025
1. find the third highest salary
2. java 8 features and difference to java 17
3. can we use local variable in lambda expressions?

        String s="";
        List.of(1,2,3,4).stream().map(x->s=s+x).collect(Collectors.toList());

        gives compile time exception saying
        Variable used in lambda expression should be final or effectively final


4. which error code will return when input validation fails(400)
5. which idempotent in http method (GET, DELETE, PUT)
6. when to use parallelStream in java8

        Yes, parallelStream() can work efficiently for 10 lakh records if:
        You’re doing CPU-bound, independent operations.
        You avoid I/O in the stream.
        Your hardware supports parallelism.
7. find how many times each character repeated in String using java?

        String s="ramuhelllo123@rtyr";
        IntStream chars = s.chars();
        Map<Character, Long> collect = chars.mapToObj(c -> (char) c).collect(Collectors.groupingBy(x -> x, Collectors.counting()));
        collect.forEach((x,y)->System.out.println(x+"  "+y));

8. why Local variable restriction in lambda ?

    Why This Restriction?
   1. ✅ Closures in Java Capture Values, Not Variables
   Java lambdas capture the value of the variable at the time the lambda is created, not a reference to the actual variable.

   So if the variable changes later, the lambda won’t see it — leading to confusing behavior.

   Restricting to final/effectively final avoids this problem.
...................................................
9. what are three rules of over loading
1. method signature should be different
2. child argument get more priority
3. Specific version will get more priority

............................................
10. Overriding rules.

1. method signature must be same
2. return type same or co variant (in child class same object or child references)
3. if any method throws any compile time exception in child class then in parent class same or parent class exception should be thrown.
4. in child class scope can be increased.

11. static control flow vs instance flow
1. In static flow top to bottom identify static members from parent to child.
2. execution of static variables assignments & static blocks from parent to child
3. Execution of child class main method

12. Instance flow
1. Identification of instance members top to bottom
2. Execution of instance variable assignments instance blocks from top to bottom
3. Execution of constructor.

13. Singleton class creation and when it gets violated.
https://salithachathuranga94.medium.com/stop-breaking-singleton-pattern-in-java-7bf7f87393c3
14. Immutable class when its get violated.
        https://salithachathuranga94.medium.com/implement-immutable-classes-with-java-df5b5b66ffd9
14. DeadLock example program
15. producer and consumer programme using multithreading.
https://medium.com/@dilip.thakkar./producer-consumer-pattern-using-java-multi-threading-229ffb8cb1a6
16.Partion example
 Given a list of integers, separate odd and even numbers?
17. How do you find frequency of each character in a string using Java 8 streams?

  String inputString = "Java Concept Of The Day";
18. sorting example in java8



ACL client cisco 03/07/2025
19.find the first highest salary by department wise
20. find the second highest salary by department wise
21. how hashmap works
22. time complexity get(key) in hashmap ans o(1)

ACl paypall interview 26/06/2025
22. java 8 features
23. what is immutability in rest Ans: though we do same request multiple times there is no change in the values
GET, PUT, DELETE
3. which method is immutable in rest
4. find the third highest salary of employee

Sony 14/07/2025
1. Why Static method in the Builder class
2. How the call goes to Rest controller in spring boot?  Dispatcher servelet-->handler mapping-->Handler adpater
3. how do you intercept  each request in spring boot?
4. when we get bean creation exception in Spring boot? when we have two subclasses which implements same class and while creatng the object for parent type
5. Solid principles
6. Design patterns
7. Do you require permission to aws lambda to connect to DB, Yes
8. //Example Input: "programming" → Output: "progamin" with out using hashmanp or set
9. @Qualifier and @Primary
10 shallow cloning and deep cloning
11. why do we require equals and hashcode methods
12. When we get Duplicate Bean creation exception
13. how to create annotations in java

23/07/2025 paypall
1. difference between hashmap, treemap and linkedhashmap and time complexity
2. difference between pathvariable and queryparam and when to use which one
3. In spring boot pagination and sorting write, Use Requestparam for passing values of pagnumber and size
4.   // Find the intersection of two arrays(with duplicates)

         // Input:  arr1 = [1, 2, 2, 3], arr2 = [2, 2, 4]

          //Output:[2,2]
5. find the second highest salry by department wise , need to print department name also
6. print the total number of students and department name
7. difference between controller and Rest controller
8. @SpringBootApplication=@Configuration
                          @EnableAutoConfiguration
                          @ComponentScan


07/08/2025 altimetrik

1. String str = "Java is a good programming language";
          //find 1st non re-occuring character: output is J;

2. OOPS principles
3. Data hiding
4. Composition/Aggregation	 in java
5. for final arraylist can i add elements? yes, but re assign not possible
6. Solid principles  // not able to tell properly the Interface segregation and dependency inversion
7. Microservices design patterns
8. In Orchestrator design pattern if in between transaction transactions orchastrator fails, how we handle

 Store the state into DB and start reading from there.

 9. How do you create a utility class in java ?
  with static variables, static methods and private constructor

08/09/2025   wayfair
1. match bracket question
2. in react create a drop down, if you select red color, then display you selected red color, similary for other colors


13/08/2025 Mphasis

1. how to get NullPointer exception
2. what is Optional class in java, how do you overcome above nullpointer exception
3. Tell me the Order below for static and instancce execution flow

public class Test {
    public static void main(String[] args) {


        System.out.println("1");
        Test helloWorld = new Test();
        helloWorld.getMethod();
    }
             Test(){
                System.out.println(" 2");
            }
            {
                System.out.println(" 3");
            }
            static{
                System.out.println(" 4");
            }
            public void getMethod(){
                System.out.println(" 5");
            }

}
4. How many ways we can create a Optional class Object in java?


13/08/2025 JP Morgan

1. Thread life cycle (difference is there between running and runnable)
2. Spring bean life cycles
3. why do we use Callable interface in java?
4. By using Executor framework write first thread prints even number and second thread prints odd number
5. how do we set the garbage collector
6.  explain how  the garbage collector works?
7. how to use two databases in Spring boot?
8. By using executor framework first thread prints even numbers and second thread prints odd numbers


14/08/2025  Globant

1. what is the use of linkedblockingQueue?
2.output of the below program
  public class Main {
      public static void main(String[] args) {

              Main obj = null;
              obj.show();

      }
      public static void show() {
          System.out.println("In show method");
      }
  }

  output??
  3. Singleton program
  4. Write custom arraylist?
  5. Optional class orElse and orLEseGet?
  6. java 8 features
  7. metaspace and permGen?
  8. intern method?
  9. final variable with static and without static

  instance variable

  final int x=10; or instance block

  {
x=10
  }
inside the constructor

  Test(){
  x=10;
  }   but for the static variables, final static x=10; or staic block

  static
  {
x=10;
  }

  10. micro services design patterns(SAGA design pattern)
  11. linear and non linear data structures? how to add elements in Binary tree?
  12. ConcurrentHashmap?
  13. parallel stream
  14. find the max length element using reduce?
  15. convert the list to map in java8
  16. Polymorhism ?? and Rules
  17. Use of linkedBlockingQueue?
  18. Equals and hashcode method when it will be useful?
  19. Set s=new hashset
       s.add(employee)
       s.add(employee)

       how many objects are stored in the hashset as no equals and hashcode methods stored
     ans :1
  20. why in streams intermediate operations are lazy?
  21. how parallel streams works
  22. difference between rank and dense_rank in db?
  23. Concurrent hashmap
24. Dirty reads, repeatable reads and serializable reads in DB


  My interview questions
  1. what is the use of abstract class constructor?
  The constructor of an abstract class is used to initialize fields of the abstract class when a subclass object is created.
2. difference between PriorityBlockingQueue, LinkedBlockingQueue?
 In LinkedBlockingQueue FIFO order will be preserved, where as PriorityBlockingQueue elements will be sorteed.

3. how linkedhashmap works?

21/08/2025--- Andor tech
1. Spring boot project
2. joins
3. java 8 functional interfaces
4. i have list of employees, display those names whose names starting with "A"
5. find the average of all the employees in java8
6. what is hash collision
7. difference between synchronizedmap and concurrent map
8. error codes
9. how hashmap stores in java8 after 8 elements added it will be storing into RED/BLACK tree if it has 64 buckets

Thresholds for Treeification

By default:

Treeify Threshold = 8
→ If a bucket has more than 8 nodes, it gets converted into a Red-Black Tree.

Untreeify Threshold = 6
→ If tree size shrinks back to <= 6 (e.g., deletions), it converts back to linked list.

Minimum capacity = 64
→ Treeification happens only if the whole HashMap has at least 64 buckets (capacity ≥ 64).
If capacity is smaller, instead of treeifying, the HashMap will resize (rehash) to reduce collisions.


22/08/2025  --Apexion
1. Difference between filter and interceptor in spring
2. There is an array A consisting of N integers. What is the maximum sum of two integers from A that have common  first and last digits?  If there are no two integers that have common  first and last digits, the function should return −1.

   Examples:

   1. Given A = [130, 191, 10, 200], the function should return 140. The only integers in A that share first and last digits are 130 and 10.

   2. Given A = [405, 45, 300, 300], the function should return 600. There are two pairs of integers that share first and last digits: (405, 45) and (300, 300). The sum of the two 300s is bigger than the sum of 405 and 45.

   3. Given A = [30, 909, 3190, 99, 3990, 9009], the function should return 9918.

3. Spring actuator
4. @Qualifier and @Primary
5. java memory management
6. Executor framework example print even and odd numbers
   and difference between executor.execute and submit methods
7. Completable feature in java
8. Optional class example full like
    how many ways  we can create a Optional object and different Optional object methods
    and difference between orElse and orELseGet()
9. difference between BeanFactory and Application context
10. how to handle failures in microservices
11. java 8 features
12. Transitive failure
13. put and patch differences
14. Difference @Retry and @cicuitbreaker


25/08/2025-- Mphasis second round

1. second highest salary
2. which gargbge collector when to use
3. types of class loaders
4. difference between flatmap, concurrenthsahmap, weakmap
5. circular dependency in java and how to avoid it
6. @Qualifier and @Lazy
7. difference between daemon thread and thread
8. Executor framework explain
9.


React
1.todo app creating
2. slices and reducers
3. hoisting different types
4. usesatate and usememo write
5. diference between usememo and useEffct
6. difference between slicers and reducers
7. spread opearator
8. callback functions
9. writing junit test cases


03/09/2025
1. producer and consumer programme
2. java 17 features sealed class and how improvemnets
3. empId, trans, status, ammount, date  i have these fields get the empid and sum of transactions done in a particular month.
4. how do you find the slow running application in micro services


03/09/2025 Mphasis
Output for below ?
1.      String s1="abc";
        String s2=s1;
        s2=s2.concat("d");
        System.out.println(s1);   System.out.println(s2);  System.out.println(s1==s2);
2.         String s1="abc";
           String s2=s1;
           s2.concat("d");
           System.out.println(s1);   System.out.println(s2);  System.out.println(s1==s2);
3. design patterns builder asked write code?
4.

09/09/2025 --Virtusa
1. method hiding

Parent p=new child()--> even though it is child object, resolution happens at the time of compilation based on the Reference type
so parent method will be called

2.  java program to find the second highest salary by department wise
3. Proxy deisgn pattern explain --> explained with Debit card proxy for bank acconut
4. In solid principles explain Liskov substitution principle?
5.  In spring boot Employee object is singleton and address object scope is session any problem.
There will be problem as Employee object bean created and Address bean not available so to avoid that we need to use below one
proxyMode = ScopedProxyMode.TARGET_CLASS

@Component
@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class Address {
    // session-specific data
}


6. Circular dependency in spring, how do you resolve it? By using lazy
7. Spring bean scopes
Scope	Description
singleton	One instance for the whole application (default)-->container
prototype	New instance every time it's requested
request	One instance per HTTP request
session	One instance per HTTP session
application	One instance per servlet context
8. difference between weak hashmap and map and linked hashmap?
9. difference between filter and interceptor in spring boot?
10. Explain Completable feature in java?

9. In kafka producer producing lot of messages and consumer not able to consume at the same speed, how to handle this case?
1. Increase Consumer Throughput
Increase the number of consumer instances in the consumer group.

Ensure the topic has enough partitions (one consumer can consume one partition at a time).

2. Block or delay the producer when Kafka is overloaded:

   acks=all
   linger.ms=10
   batch.size=32768
   buffer.memory=67108864
   max.block.ms=60000
3. Add More Kafka Partitions

   Kafka consumers scale horizontally by partition.

   If your topic only has 1 partition, only 1 consumer can consume.
10. Can two consumers can get message from same partition?

No, two consumers in the same consumer group cannot consume messages from the same Kafka partition simultaneously.

11. what is offset, how it will be useful
12. how to avoid duplicate message processing in kafka?
13. In micro services how do you protect the pods communication?
14. In Orchastrator deisgn pattern if orchastrator goes down, how do you handle the transactions?
15. micro services design patterns?
16. how service discovery happens in the eureka/ kuberneties cluster?
17. in service discovery does the client or eureka server has to service information?

Actually client has to register with the eureka server.
18. does the singleton object thread safe?
19.difference between NACL and security groups
20 difference between application load balancer and netwrok load balancer
21. difference between security groups and IAm roles
22. s3
















