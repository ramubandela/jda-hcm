OOPS concepts

🔑 Four Main OOP Concepts in Java:
Encapsulation

Abstraction

Inheritance

Polymorphism

Let’s break them down with simple examples:

✅ 1. Encapsulation
Definition: Wrapping data (variables) and methods into a single unit (class) and restricting direct access to them.

Example:
java
Copy
Edit
class Person {
    private String name;  // private = encapsulated

    public void setName(String name) {
        this.name = name;   // Setter method
    }

    public String getName() {
        return name;        // Getter method
    }
}

public class Main {
    public static void main(String[] args) {
        Person p = new Person();
        p.setName("Alice");
        System.out.println(p.getName());
    }
}
🔐 Key Point:
name is private, so it’s protected from external access.

Only accessible via getter/setter — this is encapsulation.

✅ 2. Abstraction
Definition: Hiding complex internal details and showing only the essential features.

Example:
java
Copy
Edit
abstract class Animal {
    abstract void sound();  // abstract method
}

class Dog extends Animal {
    void sound() {
        System.out.println("Barks");
    }
}
java
Copy
Edit
public class Main {
    public static void main(String[] args) {
        Animal a = new Dog(); // abstract reference
        a.sound(); // Barks
    }
}
🎭 Key Point:
Animal is abstract; you can’t create its object.

It hides how sound() is implemented — only that it must exist.

✅ 3. Inheritance
Definition: One class inherits properties and behavior (fields/methods) from another class using extends.

Example:
java
Copy
Edit
class Vehicle {
    void move() {
        System.out.println("Vehicle is moving");
    }
}

class Car extends Vehicle {
    void horn() {
        System.out.println("Car horn!");
    }
}
java
Copy
Edit
public class Main {
    public static void main(String[] args) {
        Car c = new Car();
        c.move(); // Inherited
        c.horn(); // Own method
    }
}
🔁 Key Point:
Car inherits from Vehicle.

Promotes code reusability.

✅ 4. Polymorphism
Definition: One interface, many implementations. It lets you call the same method in different ways.

Example (Method Overriding - Runtime Polymorphism):
java
Copy
Edit
class Animal {
    void sound() {
        System.out.println("Animal sound");
    }
}

class Cat extends Animal {
    void sound() {
        System.out.println("Meows");
    }
}
java
Copy
Edit
public class Main {
    public static void main(String[] args) {
        Animal a = new Cat(); // Parent reference, child object
        a.sound(); // Meows - not Animal sound
    }
}
🔄 Also:
Method overloading (same method name, different parameters) = Compile-time polymorphism.

🎯 Summary Table
Concept	Keyword/Mechanism	Description
Encapsulation	private, getters/setters	Hides internal data
Abstraction	abstract, interface	Hides complexity, shows essentials
Inheritance	extends	Reuse code from another class
Polymorphism	Overriding, Overloading	Same action, different behavior
