plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.tesco.integration'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenLocal() // First check local Maven cache (~/.m2/repository)

	maven {
		url "https://your-nexus-domain/repository/your-repo-name/"
		credentials {
			username = project.findProperty("nexusUsername") ?: ""
			password = project.findProperty("nexusPassword") ?: ""
		}
	}

	mavenCentral() // Optional, fallback to Maven Central
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

/*jacoco {
	toolVersion = "0.8.11" // use latest stable version
}*/

/*jacocoTestReport {
	dependsOn test // tests must run before generating the report

	reports {
		xml.required = true
	}
}*/

jar {
	manifest {
		attributes(
				'Main-Class': 'com.example.MainApp',
				'Implementation-Title': 'My Awesome App',
				'Implementation-Version': version
		)
	}
}

task buildDockerImage {
	group = "Docker"
	description = "Builds Docker image using Dockerfile and Gradle exec"

	dependsOn build

	doLast {
		def imageName = "${gradle.rootProject.name}:${version}"
		println "Building Docker image: $imageName"

		exec {
			commandLine 'docker', 'build', '-t', imageName, '.'
		}
	}
}
/*publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			}
		}
	repositories {
		maven {
			//name = "local"
			//url = layout.buildDirectory.dir("repo") // for testing: ./build/repo

			 //To publish to a remote Maven/Nexus repository:
			 url = uri("https://nexus.example.com/repository/maven-releases/")
			 credentials {
			     username = "${mavenUser}"
			     password = "${mavenPassword}"
			 }
		}
	}
}*/

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.projectlombok:lombok:1.18.26'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Caffeine Cache
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // Reactor Extra (for CacheMono)
    implementation 'io.projectreactor.addons:reactor-extra:3.4.0'

	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

//sonarqube {
	//properties {
		//property "sonar.exclusions", "**/dto/**, **/config/**, **/MyAppApplication.java"
		//property "sonar.coverage.exclusions", "**/dto/**, **/config/**, **/MyAppApplication.java"
	//}
//}


